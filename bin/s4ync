#!/usr/bin/env python

# Copyright 2007,2008 Josh Bressers

# This file is part of s4ync.
#
# s4ync is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# s4ync is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Foobar; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

import sys
import getopt
import s4ync.file
import s4ync.config

args = 'vpha:s:e:c:'
long_args = ['verbose', 'help', 'delete', 'access-key=', 'secret-key=',
    'encrypt=', 'cache-dir=', 'progress']

def usage():
    print """Usage: %s [OPTION] [SOURCE] [DEST]
Sync the SOURCE files with the remote DEST bucket located on Amazon S3.

Options
-v, --verbose           increase verbosity
-p, --progress          display progress of backup
-a, --access-key=KEY    Amazon S3 access key
-s, --secret-key=KEY    Amazon S3 secret key
-e, --encrypt=email     key gpg will encrypt to
-c, --cache-dir=DIR     directory that holds the cache files
    --delete            delete extraneous files from dest dirs
-h, --help              show this help
    """ % (sys.argv[0]);
    sys.exit(2)

def main():
    global args
    global long_args

    config = s4ync.config.get_config()

    try:
        opts, pargs = getopt.getopt(sys.argv[1:], args, long_args)
    except getopt.GetoptError:
        usage()

    if (args == []):
        usage()

    for var in opts:
        if (var[0] == '-h' or var[0] == '--help'):
            usage()
        elif (var[0] == '-a' or var[0] == '--access-key'):
            config.access_key = var[1]
        elif (var[0] == '-s' or var[0] == '--secret-key'):
            config.secret_key = var[1]
        elif (var[0] == '-e' or var[0] == '--encrypt'):
            config.encrypt = var[1]
        elif (var[0] == '-c' or var[0] == '--cache-dir'):
            config.cache = var[1]
        elif (var[0] == '--delete'):
            config.delete = True
        elif (var[0] == '-v' or var[0] == '--verbose'):
            config.verbose = config.verbose + 1
        elif (var[0] == '-p' or var[0] == '--progress'):
            config.progress = True

    # Make sure all the blanks have been filled in
    if ((not config.access_key) or (not config.secret_key) or (not config.encrypt)):
        usage()

    if (len(pargs) < 2):
        usage()
    else:
        destination = pargs[-1]
        source = pargs[-2]

    s4ync.file.sync_files(destination, source)

if __name__ == "__main__":
    main()
